# CUSTOMER BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: customer
spec:
  title: ASSET-Customer
  description: ASSET-Customer description
  required:
    - email
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    name:
      type: string
    email:
      type: string
    stripe_customer_id:
      type: string
      description: DO NOT TOUCH! IT WILL BE FILLED AUTOMATICALLY!
    status:
      type: string
      default: creating
      description: DO NOT TOUCH! IT WILL BE CHANGED AUTOMATICALLY!
      enum:
        - creating
        - done
        - error
---
#CARD BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: card
spec:
  title: ASSET-Card
  description: Card of customers
  required:
    - customer
    - token
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    customer:
      type: relation
      relationType: onetoone
      description: who owns this card
      bucket:
        resourceFieldRef:
          schemaName: customer
    card_id:
      type: string
      description: DONT TOUCH, IT WILL BE FILLED AUTOMATICALLY
    status:
      type: string
      description: DONT TOUCH, IT WILL BE FILLED AUTOMATICALLY
      enum:
        - creating
        - done
        - error
    token:
      type: string
      description: token of the card
---
# PAYMENT METHOD BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: payment-method
spec:
  title: ASSET-Payment Method
  description: ASSET-Payment Method description
  required:
    - payment_method_id
    - customer
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    customer:
      type: relation
      relationType: onetoone
      description: SELECT THE CUSTOMER OF THIS PAYMENT METHOD!
      bucket:
        resourceFieldRef:
          schemaName: customer
    payment_method_id:
      type: string
      description: WRITE PAYMENT METHOD ID OF THIS CUSTOMER
    status:
      type: string
      default: creating
      description: DO NOT TOUCH! IT WILL BE CHANGED AUTOMATICALLY!
      enum:
        - creating
        - done
        - error
    default:
      type: boolean
      default: false
      description: SELECT THIS IF YOU WANT THIS PAYMENT METHOD TO BE DEFAULT FOR THIS CUSTOMER.
---
# PRODUCT BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: product
spec:
  required:
    - name
  title: ASSET-Product
  description: ASSET-Product description
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    name:
      type: string
      description: NAME OF PRODUCT
    status:
      type: string
      default: creating
      description: DO NOT TOUCH!  IT WILL BE CHANGED AUTOMATICALLY!
      enum:
        - creating
        - done
        - error
    product_id:
      type: string
      description: DO NOT TOUCH!  IT WILL BE FILLED AUTOMATICALLY!
---
# PLAN BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: plan
spec:
  title: ASSET-Plan
  description: ASSET-Plan description
  required:
    - currency
    - interval
    - product
    - amount
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    product:
      type: relation
      relationType: onetoone
      description: SELECT A PRODUCT FOR THIS PLAN
      bucket:
        resourceFieldRef:
          schemaName: product
    interval:
      type: string
      default: month
      description: PAYING INTERVAL
      enum:
        - day
        - week
        - month
        - year
    amount:
      type: number
      description: AMOUNT OF MONEY
    currency:
      type: string
      description: CURRENCY OF MONEY
      default: usd
    status:
      type: string
      default: creating
      description: DO NOT TOUCH!  IT WILL BE CHANGED AUTOMATICALLY!
      enum:
        - creating
        - done
        - error
    price_id:
      type: string
      description: DO NOT TOUCH!  IT WILL BE FILLED AUTOMATICALLY!
---
# PAYMENT BUCKET
apiVersion: bucket/v1
kind: Schema
metadata:
  name: payment
spec:
  title: ASSET-Payment
  description: ASSET-Payment description
  required:
    - payment_type
  acl:
    write: "true==true"
    read: "true==true"
  properties:
    customer:
      type: relation
      relationType: onetoone
      description: SELECT WHEN - CHARGE -
      bucket:
        resourceFieldRef:
          schemaName: customer
    payment_method:
      type: relation
      relationType: onetoone
      description: SELECT WHEN - SUBSCRIBE - AND CUSTOMER HAS NO DEFAULT PAYMENT
      bucket:
        resourceFieldRef:
          schemaName: payment-method
    card:
      type: relation
      relationType: onetoone
      description: SELECT WHEN - CHARGE WITH CUSTOMER CARD
      bucket:
        resourceFieldRef:
          schemaName: card
    payment_type:
      type: string
      description: SELECT PAYMENT TYPE
      enum:
        - subscribe
        - invoice
        - charge
    token:
      type: string
      description: FILL WHEN - CHARGE -
    price:
      type: number
      description: FILL WHEN - CHARGE -
    currency:
      type: string
      description: SELECT WHEN - CHARGE -
      default: usd
    status:
      type: string
      default: creating
      description: DO NOT TOUCH!  IT WILL BE FILLED AUTOMATICALLY!
      enum:
        - creating
        - done
        - error
    plan:
      type: relation
      relationType: onetoone
      description: SELECT WHEN - SUBSCRIBE -
      bucket:
        resourceFieldRef:
          schemaName: plan
    subscribe_id:
      type: string
      description: DO NOT TOUCH!  IT WILL BE FILLED AUTOMATICALLY WHEN SUBSCRIBING.
---
# API KEY
apiVersion: passport/v1
kind: ApiKey
metadata:
  name: access-to-buckets-apikey
spec:
  name: Secret Api Key For Stripe Asset
  policies:
    - BucketFullAccess
---
# FUNCTION
apiVersion: function/v1
kind: Function
metadata:
  name: stripe-function
spec:
  title: Stripe Functions
  description: Stripe Functions description
  timeout: 50
  code: ./function/triggers.js
  runtime:
    name: Node
    language: Javascript
  environment:
    - name: SECRET_API_KEY
      valueFrom:
        resourceFieldRef:
          apiKeyName: access-to-buckets-apikey
    - name: STRIPE_TEST
      value: "stripe secret test here"
    - name: CUSTOMER_BUCKET_ID
      valueFrom:
        resourceFieldRef:
          schemaName: customer
    - name: PAYMENT_METHOD_ID
      valueFrom:
        resourceFieldRef:
          schemaName: payment-method
    - name: PRODUCT_BUCKET_ID
      valueFrom:
        resourceFieldRef:
          schemaName: product
    - name: PLAN_BUCKET_ID
      valueFrom:
        resourceFieldRef:
          schemaName: plan
    - name: PAYMENT_BUCKET_ID
      valueFrom:
        resourceFieldRef:
          schemaName: payment
    - name: PLAN_BUCKET_ID
      valueFrom:
        resourceFieldRef:
          schemaName: plan
    - name: CARD_BUCKET_ID
      valueFrom:
        resourceFieldRef:
          schemaName: card
  dependency:
    - name: "@spica-devkit/bucket"
      version: latest
    - name: "node-fetch"
      version: latest
    - name: stripe
      version: latest
---
# CUSTOMER TRIGGER
apiVersion: function/v1
kind: Trigger
metadata:
  name: customer-trigger
spec:
  name: customer
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: customer
    phase: AFTER
    type: INSERT
---
# PAYMENT METHOD TRIGGER
apiVersion: function/v1
kind: Trigger
metadata:
  name: payment-method-trigger
spec:
  name: paymentMethod
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: payment-method
    phase: AFTER
    type: INSERT
---
# PAYMENT TRIGGER
apiVersion: function/v1
kind: Trigger
metadata:
  name: payment-trigger
spec:
  name: payment
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: payment
    phase: AFTER
    type: INSERT
---
# PRODUCT TRIGGER
apiVersion: function/v1
kind: Trigger
metadata:
  name: product-trigger
spec:
  name: product
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: product
    phase: AFTER
    type: INSERT
---
# PLAN TRIGGER
apiVersion: function/v1
kind: Trigger
metadata:
  name: plan-trigger
spec:
  name: plan
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: plan
    phase: AFTER
    type: INSERT
---
# Card Trigger
apiVersion: function/v1
kind: Trigger
metadata:
  name: card-trigger
spec:
  name: card
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: card
    phase: AFTER
    type: INSERT
---
# Delete Payment Method
apiVersion: function/v1
kind: Trigger
metadata:
  name: delete-payment-method-trigger
spec:
  name: deletePaymentMethod
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: payment-method
    phase: AFTER
    type: DELETE
---
# Delete Product
apiVersion: function/v1
kind: Trigger
metadata:
  name: delete-product-trigger
spec:
  name: deleteProduct
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: product
    phase: AFTER
    type: DELETE
---
# Delete Payment
apiVersion: function/v1
kind: Trigger
metadata:
  name: delete-payment-trigger
spec:
  name: deletePayment
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: payment
    phase: AFTER
    type: DELETE
---
# Delete Plan
apiVersion: function/v1
kind: Trigger
metadata:
  name: delete-plan-trigger
spec:
  name: deletePlan
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: plan
    phase: AFTER
    type: DELETE
---
# Delete Card
apiVersion: function/v1
kind: Trigger
metadata:
  name: delete-card-trigger
spec:
  name: deleteCard
  func: stripe-function
  type: bucket
  bucketOptions:
    bucket:
      resourceFieldRef:
        schemaName: card
    phase: AFTER
    type: DELETE
